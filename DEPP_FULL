

## Import

import delimited C:\Users\Antoine\Desktop\DEPP\s97.csv
save "C:\Users\Antoine\Desktop\DEPP\s97.dta"
clear
import delimited C:\Users\Antoine\Desktop\DEPP\s98.csv
save "C:\Users\Antoine\Desktop\DEPP\s98.dta"
clear
import delimited C:\Users\Antoine\Desktop\DEPP\s99.csv
save "C:\Users\Antoine\Desktop\DEPP\s99.dta"
clear
import delimited C:\Users\Antoine\Desktop\DEPP\s00.csv
save "C:\Users\Antoine\Desktop\DEPP\s00.dta"
clear
import delimited C:\Users\Antoine\Desktop\DEPP\s01.csv
save "C:\Users\Antoine\Desktop\DEPP\s01.dta"
clear
import delimited C:\Users\Antoine\Desktop\DEPP\s02.csv
save "C:\Users\Antoine\Desktop\DEPP\s02.dta"
clear
import delimited C:\Users\Antoine\Desktop\DEPP\s03.csv
save "C:\Users\Antoine\Desktop\DEPP\s03.dta"
clear
import delimited C:\Users\Antoine\Desktop\DEPP\s04.csv
save "C:\Users\Antoine\Desktop\DEPP\s04.dta"
clear
import delimited C:\Users\Antoine\Desktop\DEPP\s05.csv
save "C:\Users\Antoine\Desktop\DEPP\s05.dta"
clear
import delimited C:\Users\Antoine\Desktop\DEPP\s06.csv
save "C:\Users\Antoine\Desktop\DEPP\s06.dta"
clear
import delimited C:\Users\Antoine\Desktop\DEPP\s07.csv
save "C:\Users\Antoine\Desktop\DEPP\s07.dta"
clear
import delimited C:\Users\Antoine\Desktop\DEPP\s08.csv
save "C:\Users\Antoine\Desktop\DEPP\s08.dta"
clear
import delimited C:\Users\Antoine\Desktop\DEPP\s09.csv
save "C:\Users\Antoine\Desktop\DEPP\s09.dta"
clear
import delimited C:\Users\Antoine\Desktop\DEPP\s10.csv
save "C:\Users\Antoine\Desktop\DEPP\s10.dta"
clear
import delimited C:\Users\Antoine\Desktop\DEPP\s11.csv
save "C:\Users\Antoine\Desktop\DEPP\s11.dta"
clear
import delimited C:\Users\Antoine\Desktop\DEPP\s12.csv
save "C:\Users\Antoine\Desktop\DEPP\s12.dta"
clear
import delimited C:\Users\Antoine\Desktop\DEPP\s13.csv
save "C:\Users\Antoine\Desktop\DEPP\s13.dta"
clear
import delimited C:\Users\Antoine\Desktop\DEPP\s14.csv
save "C:\Users\Antoine\Desktop\DEPP\s14.dta"

## Gestion des incohérences de format 

use "C:\Users\Antoine\Desktop\DEPP\s07.dta"

tab franaistranger

destring franaistranger, replace force
save "C:\Users\Antoine\Desktop\DEPP\s07.dta", replace
use "C:\Users\Antoine\Desktop\DEPP\s08.dta"
destring franaistranger, replace force
save "C:\Users\Antoine\Desktop\DEPP\s08.dta", replace
use "C:\Users\Antoine\Desktop\DEPP\s09.dta"
destring franaistranger, replace force
save "C:\Users\Antoine\Desktop\DEPP\s09.dta", replace
use "C:\Users\Antoine\Desktop\DEPP\s10.dta"
destring franaistranger, replace force
save "C:\Users\Antoine\Desktop\DEPP\s10.dta", replace
use "C:\Users\Antoine\Desktop\DEPP\s11.dta"
destring franaistranger, replace force
save "C:\Users\Antoine\Desktop\DEPP\s11.dta", replace
use "C:\Users\Antoine\Desktop\DEPP\s12.dta"
destring franaistranger, replace force
save "C:\Users\Antoine\Desktop\DEPP\s12.dta", replace
use "C:\Users\Antoine\Desktop\DEPP\s13.dta"
destring franaistranger, replace force
save "C:\Users\Antoine\Desktop\DEPP\s13.dta", replace
use "C:\Users\Antoine\Desktop\DEPP\s14.dta"
destring franaistranger, replace force
save "C:\Users\Antoine\Desktop\DEPP\s14.dta", replace
clear

## Fusion des fichiers par année

use "C:\Users\Antoine\Desktop\DEPP\s97.dta", clear

append using "C:\Users\Antoine\Desktop\DEPP\s98.dta"
append using "C:\Users\Antoine\Desktop\DEPP\s99.dta"
append using "C:\Users\Antoine\Desktop\DEPP\s00.dta"
append using "C:\Users\Antoine\Desktop\DEPP\s01.dta"
append using "C:\Users\Antoine\Desktop\DEPP\s02.dta"
append using "C:\Users\Antoine\Desktop\DEPP\s03.dta"
append using "C:\Users\Antoine\Desktop\DEPP\s04.dta"
append using "C:\Users\Antoine\Desktop\DEPP\s05.dta"
append using "C:\Users\Antoine\Desktop\DEPP\s06.dta"
append using "C:\Users\Antoine\Desktop\DEPP\s07.dta"
append using "C:\Users\Antoine\Desktop\DEPP\s08.dta"
append using "C:\Users\Antoine\Desktop\DEPP\s09.dta"
append using "C:\Users\Antoine\Desktop\DEPP\s10.dta"
append using "C:\Users\Antoine\Desktop\DEPP\s11.dta"
append using "C:\Users\Antoine\Desktop\DEPP\s12.dta"
append using "C:\Users\Antoine\Desktop\DEPP\s13.dta"
append using "C:\Users\Antoine\Desktop\DEPP\s14.dta"

## Sauvegarde

save "C:\Users\Antoine\Desktop\DEPP\depp.dta"

## Renommage des variables

ren originesocialedtaille pcs8
ren pcs8 pcs24
ren originesociale8groupes pcs8
ren franaistranger natio
ren sriedubaccalauratlibc serie
ren numrodtablissement numetan
ren numetan numetab
ren communeetarrondissement com
ren secteurdenseignement secteur
ren etablissementsensible sensible
ren nombredinscrits inscrits
ren nombredeprsents presents
ren nombretotaldadmis admis
ren nombredadmissansmention nomention
ren nombredadmismentionab ab
ren nombredadmismentionb b
ren nombredadmismentiontb tb
ren nombredtablissements nbetab

## Id Unique Lycée x Session 

egen id_etab = concat(numetab session), punct(_)


## Compteur des résultats

gen num = 1

bysort id_etab : egen  pond_admis = total(admis)
bysort id_etab : egen  pond_inscrits = total(inscrits)
bysort id_etab : egen  pond_presents = total(presents)
bysort id_etab : egen  pond_nomention = total(nomention)
bysort id_etab : egen  pond_ab = total(ab)
bysort id_etab : egen  pond_b = total(b)
bysort id_etab : egen  pond_tb = total(tb)

order pond_inscrits pond_presents, after( num )

## Taux de réussite et mention

gen psucc = ( pond_admis / pond_inscrits ) * 100
gen nm_adm = ( pond_nomention / pond_admis ) * 100
gen ab_adm = ( pond_ab / pond_admis ) * 100
gen b_adm = ( pond_b / pond_admis ) * 100
gen tb_adm = ( pond_tb / pond_admis ) * 100

## Gestion des valeurs manquantes

replace nm_adm = 0 if nm_adm == .
replace ab_adm = 0 if ab_adm == .
replace b_adm = 0 if b_adm == .
replace tb_adm = 0 if tb_adm == .

## Identifiant par mention, par lycée et par session 

egen id_etab2 = concat(numetab session serie ), punct(_)

bysort id_etab2 : egen  ser_admis = total(admis)
bysort id_etab2 : egen  ser_inscrits = total(inscrits)
bysort id_etab2 : egen  ser_presents = total(presents)
bysort id_etab2 : egen  ser_nomention = total(nomention)
bysort id_etab2 : egen  ser_ab = total(ab)
bysort id_etab2 : egen  ser_b = total(b)
bysort id_etab2 : egen  ser_tb = total(tb)

gen ser_succ = ( ser_admis / ser_inscrits ) * 100
gen ser_nm_adm = ( ser_nomention / ser_admis ) * 100
gen ser_ab_adm = ( ser_ab / ser_admis ) * 100
gen ser_b_adm = ( ser_b / ser_admis ) * 100
gen ser_tb_adm = ( ser_tb / ser_admis ) * 100

replace ser_nm_adm = 0 if ser_nm_adm == .
replace ser_ab_adm = 0 if ser_ab_adm == .
replace ser_b_adm = 0 if ser_b_adm == .
replace ser_tb_adm = 0 if ser_tb_adm == .

## TODO : PCS

use "C:\Users\Antoine\Desktop\DEPP\depp.dta", clear

bysort id_etab : egen cs1 = total(inscrits) if pcs8 == 1
bysort id_etab : egen cs2 = total(inscrits) if pcs8 == 2
bysort id_etab : egen cs3 = total(inscrits) if pcs8 == 3
bysort id_etab : egen cs4 = total(inscrits) if pcs8 == 4
bysort id_etab : egen cs5 = total(inscrits) if pcs8 == 5
bysort id_etab : egen cs6 = total(inscrits) if pcs8 == 6
bysort id_etab : egen cs7 = total(inscrits) if pcs8 == 7
bysort id_etab : egen cs8 = total(inscrits) if pcs8 == 8
bysort id_etab : egen cs9 = total(inscrits) if pcs8 == 9

## Cylindrage des données 

egen test = group ( id_etab )

xfill cs1, i(test)
xfill cs2, i(test)
xfill cs3, i(test)
xfill cs4, i(test)
xfill cs5, i(test)
xfill cs6, i(test)
xfill cs7, i(test)
xfill cs8, i(test)
xfill cs9, i(test)

replace cs1 = 0 if cs1 == .
replace cs2 = 0 if cs2 == .
replace cs3 = 0 if cs3 == .
replace cs4 = 0 if cs4 == .
replace cs5 = 0 if cs5 == .
replace cs6 = 0 if cs6 == .
replace cs7 = 0 if cs7 == .
replace cs8 = 0 if cs8 == .
replace cs9 = 0 if cs9 == .

## Boucle pourcentages (CS8)

foreach x of varlist (cs1-cs9) {
gen p_`x' = (`x' / pond_inscrits) * 100
}

## Controle

egen control_1 = rowtotal (p_cs1-p_cs9)

drop control_1


### A partir de cette étape, on peut réaliser un export ###
### On peut aussi reprendre la procédure avec la pcs24  ###

### Demo Export ###

save "C:\Users\Antoine\Desktop\DEPP\depp.dta", replace

duplicates drop test, force
 
## On passe ici d'un dataset à 5 millions de lignes à un dataset de 100 000 lignes.
## Une par an, par lycée, par série, par cs à une par an et par lycée.

### PCS 24 postes 
 
bysort id_etab : egen cs10 = total(inscrits) if pcs24 == 10
bysort id_etab : egen cs20 = total(inscrits) if pcs24 == 20
bysort id_etab : egen cs21 = total(inscrits) if pcs24 == 21
bysort id_etab : egen cs22 = total(inscrits) if pcs24 == 22
bysort id_etab : egen cs23 = total(inscrits) if pcs24 == 23
bysort id_etab : egen cs30 = total(inscrits) if pcs24 == 30
bysort id_etab : egen cs31 = total(inscrits) if pcs24 == 31
bysort id_etab : egen cs33 = total(inscrits) if pcs24 == 33
bysort id_etab : egen cs34 = total(inscrits) if pcs24 == 34
bysort id_etab : egen cs35 = total(inscrits) if pcs24 == 35
bysort id_etab : egen cs37 = total(inscrits) if pcs24 == 37
bysort id_etab : egen cs38 = total(inscrits) if pcs24 == 38
bysort id_etab : egen cs40 = total(inscrits) if pcs24 == 40
bysort id_etab : egen cs42 = total(inscrits) if pcs24 == 42
bysort id_etab : egen cs43 = total(inscrits) if pcs24 == 43
bysort id_etab : egen cs44 = total(inscrits) if pcs24 == 44
bysort id_etab : egen cs45 = total(inscrits) if pcs24 == 45
bysort id_etab : egen cs46 = total(inscrits) if pcs24 == 46
bysort id_etab : egen cs47 = total(inscrits) if pcs24 == 47
bysort id_etab : egen cs48 = total(inscrits) if pcs24 == 48
bysort id_etab : egen cs50 = total(inscrits) if pcs24 == 50
bysort id_etab : egen cs52 = total(inscrits) if pcs24 == 52
bysort id_etab : egen cs53 = total(inscrits) if pcs24 == 53
bysort id_etab : egen cs54 = total(inscrits) if pcs24 == 54
bysort id_etab : egen cs55 = total(inscrits) if pcs24 == 55
bysort id_etab : egen cs56 = total(inscrits) if pcs24 == 56
bysort id_etab : egen cs60 = total(inscrits) if pcs24 == 60
bysort id_etab : egen cs61 = total(inscrits) if pcs24 == 61
bysort id_etab : egen cs66 = total(inscrits) if pcs24 == 66
bysort id_etab : egen cs69 = total(inscrits) if pcs24 == 69
bysort id_etab : egen cs70 = total(inscrits) if pcs24 == 70
bysort id_etab : egen cs71 = total(inscrits) if pcs24 == 71
bysort id_etab : egen cs72 = total(inscrits) if pcs24 == 72
bysort id_etab : egen cs73 = total(inscrits) if pcs24 == 73
bysort id_etab : egen cs76 = total(inscrits) if pcs24 == 76
bysort id_etab : egen cs80 = total(inscrits) if pcs24 == 80
bysort id_etab : egen cs81 = total(inscrits) if pcs24 == 81
bysort id_etab : egen cs82 = total(inscrits) if pcs24 == 82
bysort id_etab : egen cs99 = total(inscrits) if pcs24 == 99


xfill cs10 , i(test)
xfill cs20 , i(test)
xfill cs21 , i(test)
xfill cs22 , i(test)
xfill cs23 , i(test)
xfill cs30 , i(test)
xfill cs31 , i(test)
xfill cs33 , i(test)
xfill cs34 , i(test)
xfill cs35 , i(test)
xfill cs37 , i(test)
xfill cs38 , i(test)
xfill cs40 , i(test)
xfill cs42 , i(test)
xfill cs43 , i(test)
xfill cs44 , i(test)
xfill cs45 , i(test)
xfill cs46 , i(test)
xfill cs47 , i(test)
xfill cs48 , i(test)
xfill cs50 , i(test)
xfill cs52 , i(test)
xfill cs53 , i(test)
xfill cs54 , i(test)
xfill cs55 , i(test)
xfill cs56 , i(test)
xfill cs60 , i(test)
xfill cs61 , i(test)
xfill cs66 , i(test)
xfill cs69 , i(test)
xfill cs70 , i(test)
xfill cs71 , i(test)
xfill cs72 , i(test)
xfill cs73 , i(test)
xfill cs76 , i(test)
xfill cs80 , i(test)
xfill cs81 , i(test)
xfill cs82 , i(test)
xfill cs99 , i(test)


replace cs10=0 if cs10==.
replace cs20=0 if cs20==.
replace cs21=0 if cs21==.
replace cs22=0 if cs22==.
replace cs23=0 if cs23==.
replace cs30=0 if cs30==.
replace cs31=0 if cs31==.
replace cs33=0 if cs33==.
replace cs34=0 if cs34==.
replace cs35=0 if cs35==.
replace cs37=0 if cs37==.
replace cs38=0 if cs38==.
replace cs40=0 if cs40==.
replace cs42=0 if cs42==.
replace cs43=0 if cs43==.
replace cs44=0 if cs44==.
replace cs45=0 if cs45==.
replace cs46=0 if cs46==.
replace cs47=0 if cs47==.
replace cs48=0 if cs48==.
replace cs50=0 if cs50==.
replace cs52=0 if cs52==.
replace cs53=0 if cs53==.
replace cs54=0 if cs54==.
replace cs55=0 if cs55==.
replace cs56=0 if cs56==.
replace cs60=0 if cs60==.
replace cs61=0 if cs61==.
replace cs66=0 if cs66==.
replace cs69=0 if cs69==.
replace cs70=0 if cs70==.
replace cs71=0 if cs71==.
replace cs72=0 if cs72==.
replace cs73=0 if cs73==.
replace cs76=0 if cs76==.
replace cs80=0 if cs80==.
replace cs81=0 if cs81==.
replace cs82=0 if cs82==.
replace cs99=0 if cs99==.


foreach x of varlist (cs10-cs99) {
gen p_`x' = (`x' / pond_inscrits) * 100
}

## Identification des effectifs par par type de bac

bysort id_etab : egen bac_es = total(inscrits) if type == 1
bysort id_etab : egen bac_l = total(inscrits) if type == 6
bysort id_etab : egen bac_s = total(inscrits) if type == 9

xfill bac_es, i(test)
xfill bac_l, i(test)
xfill bac_s, i(test)

replace bac_es = 0 if bac_es == .
replace bac_l = 0 if bac_l == .
replace bac_s = 0 if bac_s == .

foreach x of varlist (bac_es-bac_s) {
gen p_`x' = (`x' / tot_inscrits) * 100
}

## Taux de réussite par type de bac

bysort id_etab : egen adm_bac_es = total(admis) if type == 1
bysort id_etab : egen adm_bac_l = total(admis) if type == 6
bysort id_etab : egen adm_bac_s = total(admis) if type == 9

xfill adm_bac_es, i(test)
xfill adm_bac_l, i(test)
xfill adm_bac_s, i(test)

replace adm_bac_es = 0 if adm_bac_es == .
replace adm_bac_l = 0 if adm_bac_l == .
replace adm_bac_s = 0 if adm_bac_s == .

gen tx_adm_es = (adm_bac_es / bac_es) * 100
gen tx_adm_l  = (adm_bac_l  / bac_l) * 100
gen tx_adm_s  = (adm_bac_s  / bac_s) * 100


## Taux de mention par type de bac 

bysort id_etab : egen nm_bac_es = total(nomention) if type == 1
bysort id_etab : egen ab_bac_es = total(ab) if type == 1
bysort id_etab : egen b_bac_es = total(b) if type == 1
bysort id_etab : egen tb_bac_es = total(tb) if type == 1

bysort id_etab : egen nm_bac_l = total(nomention) if type == 6
bysort id_etab : egen ab_bac_l = total(ab) if type == 6
bysort id_etab : egen b_bac_l = total(b) if type == 6
bysort id_etab : egen tb_bac_l = total(tb) if type == 6

bysort id_etab : egen nm_bac_s = total(nomention) if type == 9
bysort id_etab : egen ab_bac_s = total(ab) if type == 9
bysort id_etab : egen b_bac_s = total(b) if type == 9
bysort id_etab : egen tb_bac_s = total(tb) if type == 9

-----------------------------------------------------------------

xfill nm_bac_es, i(test)
xfill ab_bac_es, i(test)
xfill b_bac_es, i(test)
xfill tb_bac_es , i(test)

xfill nm_bac_l, i(test)
xfill ab_bac_l, i(test)
xfill b_bac_l, i(test)
xfill tb_bac_l , i(test)

xfill nm_bac_s , i(test)
xfill ab_bac_s , i(test)
xfill b_bac_s , i(test)
xfill tb_bac_s , i(test)

replace nm_bac_es = 0 if nm_bac_es ==.
replace ab_bac_es = 0 if ab_bac_es ==.
replace b_bac_es = 0 if b_bac_es ==.
replace tb_bac_es  = 0 if tb_bac_es ==.

replace nm_bac_l = 0 if nm_bac_l ==.
replace ab_bac_l = 0 if ab_bac_l==.
replace b_bac_l = 0 if b_bac_l ==.
replace tb_bac_l  = 0 if tb_bac_l==.

replace nm_bac_s  = 0 if nm_bac_s==.
replace ab_bac_s  = 0 if ab_bac_s ==.
replace b_bac_s  = 0 if b_bac_s==.
replace tb_bac_s = 0 if tb_bac_s==.


gen tx_nm_es = (nm_bac_es / adm_bac_es) * 100
gen tx_ab_es = (ab_bac_es / adm_bac_es) * 100
gen tx_b_es  = (b_bac_es / adm_bac_es)  * 100
gen tx_tb_es = (tb_bac_es / adm_bac_es) * 100

gen tx_nm_l = (nm_bac_l / adm_bac_l) * 100
gen tx_ab_l = (ab_bac_l / adm_bac_l) * 100
gen tx_b_l  = (b_bac_l / adm_bac_l)  * 100
gen tx_tb_l = (tb_bac_l / adm_bac_l) * 100

gen tx_nm_s = (nm_bac_s / adm_bac_s) * 100
gen tx_ab_s = (ab_bac_s / adm_bac_s) * 100
gen tx_b_s  = (b_bac_s / adm_bac_s)  * 100
gen tx_tb_s = (tb_bac_s / adm_bac_s) * 100

foreach x of varlist(tx_nm_es-tx_tb_s) {
replace `x' = 0 if `x' ==.
}

## Codage CEP


gen cep==0

replace cep=1 if numetab == "0601864A"
replace cep=1 if numetab == "0600021X"
replace cep=1 if numetab == "0840005Z"
replace cep=1 if numetab == "0770922J"
replace cep=1 if numetab == "0930126G"
replace cep=1 if numetab == "0931430Z"
replace cep=1 if numetab == "0932048W"
replace cep=1 if numetab == "0941470M"
replace cep=1 if numetab == "0930119Z"
replace cep=1 if numetab == "0930120A"
replace cep=1 if numetab == "0930123D"
replace cep=1 if numetab == "0941930M"
replace cep=1 if numetab == "0930121B"
replace cep=1 if numetab == "0941232D"
replace cep=1 if numetab == "0772296C"
replace cep=1 if numetab == "0931613Y"
replace cep=1 if numetab == "0941474S"
replace cep=1 if numetab == "0932034F"
replace cep=1 if numetab == "0932026X"
replace cep=1 if numetab == "0930118Y"
replace cep=1 if numetab == "0931584S"
replace cep=1 if numetab == "0771663P"
replace cep=1 if numetab == ""
replace cep=1 if numetab == "0932121A"
replace cep=1 if numetab == "0932030B"
replace cep=1 if numetab == "0772229E"
replace cep=1 if numetab == "0930116W"
replace cep=1 if numetab == "0930833A"
replace cep=1 if numetab == "0580032V"
replace cep=1 if numetab == "0710054Y"
replace cep=1 if numetab == "0210003P"
replace cep=1 if numetab == "9710774P"
replace cep=1 if numetab == "9710981"
replace cep=1 if numetab == "9711012Y"
replace cep=1 if numetab == "9710940V"
replace cep=1 if numetab == "9711033W"
replace cep=1 if numetab == "9730235T"
replace cep=1 if numetab == "9730371R"
replace cep=1 if numetab == "0620109G"
replace cep=1 if numetab == "0620093P"
replace cep=1 if numetab == "0596854E"
replace cep=1 if numetab == "0595884A"
replace cep=1 if numetab == "0590185F"
replace cep=1 if numetab == "0595616J"
replace cep=1 if numetab == "0590233H"
replace cep=1 if numetab == "0692717D"
replace cep=1 if numetab == "0693619J"
replace cep=1 if numetab == "0690104N"
replace cep=1 if numetab == "9720350Y"
replace cep=1 if numetab == "9720004X"
replace cep=1 if numetab == "9720771F"
replace cep=1 if numetab == "9720692V"
replace cep=1 if numetab == "0660809W"
replace cep=1 if numetab == "0340076Y"
replace cep=1 if numetab == "0340040J"
replace cep=1 if numetab == "0570030Y"
replace cep=1 if numetab == "0572022N"
replace cep=1 if numetab == "0570085H"
replace cep=1 if numetab == "0570023R"
replace cep=1 if numetab == "9830504F"
replace cep=1 if numetab == "9830377T"
replace cep=1 if numetab == "9830483H"
replace cep=1 if numetab == "9830507J"
replace cep=1 if numetab == "9830557N"
replace cep=1 if numetab == "0281077U"
replace cep=1 if numetab == "0280021W"
replace cep=1 if numetab == "0750711R"
replace cep=1 if numetab == "0750673Z"
replace cep=1 if numetab == "0860005N"
replace cep=1 if numetab == "0510062R"
replace cep=1 if numetab == "0080045F"
replace cep=1 if numetab == "0100023W"
replace cep=1 if numetab == "0080040A"
replace cep=1 if numetab == "0520027X"
replace cep=1 if numetab == "0080018B"
replace cep=1 if numetab == "9740053P"
replace cep=1 if numetab == "9740952S"
replace cep=1 if numetab == "9741186W"
replace cep=1 if numetab == "9740979W"
replace cep=1 if numetab == "9740043D"
replace cep=1 if numetab == "0271582Y"
replace cep=1 if numetab == "0762601P"
replace cep=1 if numetab == "0760109F"
replace cep=1 if numetab == "0271580W"
replace cep=1 if numetab == "0760029U"
replace cep=1 if numetab == "0271585B"
replace cep=1 if numetab == "0760058A"
replace cep=1 if numetab == "0760110G"
replace cep=1 if numetab == "0761742F"
replace cep=1 if numetab == "0762879S"
replace cep=1 if numetab == "0921594H"
replace cep=1 if numetab == "0951766D"
replace cep=1 if numetab == "0950640E"
replace cep=1 if numetab == "0910620E"
replace cep=1 if numetab == "0911346U"
replace cep=1 if numetab == "0911927A"
replace cep=1 if numetab == "0911492C"
replace cep=1 if numetab == "0921156G"
replace cep=1 if numetab == "0920141D"
replace cep=1 if numetab == "0920137Z"
replace cep=1 if numetab == "0950947N"
replace cep=1 if numetab == "0951728M"
replace cep=1 if numetab == "0782540M"
replace cep=1 if numetab == "0950648N"
replace cep=1 if numetab == "0782539L"


## Date d'entrée dans le dispositif CEP


gen ent_cep = .

replace ent_cep = 2012  if numetab=="0601864A"
replace ent_cep = 2006  if numetab=="0600021X"
replace ent_cep = 2014  if numetab=="0840005Z"
replace ent_cep = 2007  if numetab=="0770922J"
replace ent_cep = 2001  if numetab=="0930126G"
replace ent_cep = 2002  if numetab=="0931430Z"
replace ent_cep = 2007  if numetab=="0932048W"
replace ent_cep = 2007  if numetab=="0941470M"
replace ent_cep = 2002  if numetab=="0930119Z"
replace ent_cep = 2004  if numetab=="0930120A"
replace ent_cep = 2007  if numetab=="0930123D"
replace ent_cep = 2011  if numetab=="0941930M"
replace ent_cep = 2009  if numetab=="0930121B"
replace ent_cep = 2003  if numetab=="0941232D"
replace ent_cep = 2011  if numetab=="0772296C"
replace ent_cep = 2002  if numetab=="0931613Y"
replace ent_cep = 2009  if numetab=="0941474S"
replace ent_cep = 2006  if numetab=="0932034F"
replace ent_cep = 2006  if numetab=="0932026X"
replace ent_cep = 2004  if numetab=="0930118Y"
replace ent_cep = 2008  if numetab=="0931584S"
replace ent_cep = 2005  if numetab=="0771663P"
replace ent_cep = 2014  if numetab==""
replace ent_cep = 2006  if numetab=="0932121A"
replace ent_cep = 2008  if numetab=="0932030B"
replace ent_cep = 2009  if numetab=="0772229E"
replace ent_cep = 2006  if numetab=="0930116W"
replace ent_cep = 2001  if numetab=="0930833A"
replace ent_cep = 2013  if numetab=="0580032V"
replace ent_cep = 2012  if numetab=="0710054Y"
replace ent_cep = 2011  if numetab=="0210003P"
replace ent_cep = 2005  if numetab=="9710774P"
replace ent_cep = 2005  if numetab=="9710981"
replace ent_cep = 2005  if numetab=="9711012Y"
replace ent_cep = 2012  if numetab=="9710940V"
replace ent_cep = 2005  if numetab=="9711033W"
replace ent_cep = 2006  if numetab=="9730235T"
replace ent_cep = 2006  if numetab=="9730371R"
replace ent_cep = 2005  if numetab=="0620109G"
replace ent_cep = 2006  if numetab=="0620093P"
replace ent_cep = 2006  if numetab=="0596854E"
replace ent_cep = 2005  if numetab=="0595884A"
replace ent_cep = 2005  if numetab=="0590185F"
replace ent_cep = 2006  if numetab=="0595616J"
replace ent_cep = 2006  if numetab=="0590233H"
replace ent_cep = 2004  if numetab=="0692717D"
replace ent_cep = 2004  if numetab=="0693619J"
replace ent_cep = 2004  if numetab=="0690104N"
replace ent_cep = 2013  if numetab=="9720350Y"
replace ent_cep = 2006  if numetab=="9720004X"
replace ent_cep = 2013  if numetab=="9720771F"
replace ent_cep = 2006  if numetab=="9720692V"
replace ent_cep = 2004  if numetab=="0660809W"
replace ent_cep = 2012  if numetab=="0340076Y"
replace ent_cep = 2012  if numetab=="0340040J"
replace ent_cep = 2003  if numetab=="0570030Y"
replace ent_cep = 2001  if numetab=="0572022N"
replace ent_cep = 2001  if numetab=="0570085H"
replace ent_cep = 2001  if numetab=="0570023R"
replace ent_cep = 2010  if numetab=="9830504F"
replace ent_cep = 2010  if numetab=="9830377T"
replace ent_cep = 2009  if numetab=="9830483H"
replace ent_cep = 2009  if numetab=="9830507J"
replace ent_cep = 2009  if numetab=="9830557N"
replace ent_cep = 2010  if numetab=="0281077U"
replace ent_cep = 2010  if numetab=="0280021W"
replace ent_cep = 2010  if numetab=="0750711R"
replace ent_cep = 2010  if numetab=="0750673Z"
replace ent_cep = 2005  if numetab=="0860005N"
replace ent_cep = 2009  if numetab=="0510062R"
replace ent_cep = 2009  if numetab=="0080045F"
replace ent_cep = 2009  if numetab=="0100023W"
replace ent_cep = 2010  if numetab=="0080040A"
replace ent_cep = 2009  if numetab=="0520027X"
replace ent_cep = 2010  if numetab=="0080018B"
replace ent_cep = 2014  if numetab=="9740053P"
replace ent_cep = 2014  if numetab=="9740952S"
replace ent_cep = 2014  if numetab=="9741186W"
replace ent_cep = 2012  if numetab=="9740979W"
replace ent_cep = 2012  if numetab=="9740043D"
replace ent_cep = 2007  if numetab=="0271582Y"
replace ent_cep = 2008  if numetab=="0762601P"
replace ent_cep = 2010  if numetab=="0760109F"
replace ent_cep = 2010  if numetab=="0271580W"
replace ent_cep = 2008  if numetab=="0760029U"
replace ent_cep = 2013  if numetab=="0271585B"
replace ent_cep = 2006  if numetab=="0760058A"
replace ent_cep = 2010  if numetab=="0760110G"
replace ent_cep = 2006  if numetab=="0761742F"
replace ent_cep = 2009  if numetab=="0762879S"
replace ent_cep = 2003  if numetab=="0921594H"
replace ent_cep = 2007  if numetab=="0951766D"
replace ent_cep = 2008  if numetab=="0950640E"
replace ent_cep = 2005  if numetab=="0910620E"
replace ent_cep = 2002  if numetab=="0911346U"
replace ent_cep = 2007  if numetab=="0911927A"
replace ent_cep = 2001  if numetab=="0911492C"
replace ent_cep = 2008  if numetab=="0921156G"
replace ent_cep = 2007  if numetab=="0920141D"
replace ent_cep = 2001  if numetab=="0920137Z"
replace ent_cep = 2009  if numetab=="0950947N"
replace ent_cep = 2002  if numetab=="0951728M"
replace ent_cep = 2003  if numetab=="0782540M"
replace ent_cep = 2013  if numetab=="0950648N"
replace ent_cep = 2002  if numetab=="0782539L"


## Cumul des mentions Bien et Très Bien

gen tx_btb = b_adm + tb_adm

gen tx_btb_es = tx_b_es + tx_tb_es
gen tx_btb_l = tx_b_l + tx_tb_l
gen tx_btb_s = tx_b_s + tx_tb_s

## Analyse factorielle par pcs


factor p_cs1-p_cs9 [w= tot_inscrits] if session==1997
predict a1_97 a2_97 a3_97

factor p_cs1-p_cs9 [w= tot_inscrits] if session==1998
predict a1_98 a2_98 a3_98

factor p_cs1-p_cs9 [w= tot_inscrits] if session==1999
predict a1_99 a2_99 a3_99

factor p_cs1-p_cs9 [w= tot_inscrits] if session==2000
predict a1_00 a2_00 a3_00

factor p_cs1-p_cs9 [w= tot_inscrits] if session==2001
predict a1_01 a2_01 a3_01

factor p_cs1-p_cs9 [w= tot_inscrits] if session==2002
predict a1_02 a2_02 a3_02

factor p_cs1-p_cs9 [w= tot_inscrits] if session==2003
predict a1_03 a2_03 a3_03

factor p_cs1-p_cs9 [w= tot_inscrits] if session==2004
predict a1_04 a2_04 a3_04

factor p_cs1-p_cs9 [w= tot_inscrits] if session==2005
predict a1_05 a2_05 a3_05

factor p_cs1-p_cs9 [w= tot_inscrits] if session==2006
predict a1_06 a2_06 a3_06

factor p_cs1-p_cs9 [w= tot_inscrits] if session==2007
predict a1_07 a2_07 a3_07

factor p_cs1-p_cs9 [w= tot_inscrits] if session==2008
predict a1_08 a2_08 a3_08

factor p_cs1-p_cs9 [w= tot_inscrits] if session==2009
predict a1_09 a2_09 a3_09

factor p_cs1-p_cs9 [w= tot_inscrits] if session==2010
predict a1_10 a2_10 a3_10

factor p_cs1-p_cs9 [w= tot_inscrits] if session==2011
predict a1_11 a2_11 a3_11

factor p_cs1-p_cs9 [w= tot_inscrits] if session==2012
predict a1_12 a2_12 a3_12

factor p_cs1-p_cs9 [w= tot_inscrits] if session==2013
predict a1_13 a2_13 a3_13

factor p_cs1-p_cs9 [w= tot_inscrits] if session==2014
predict a1_14 a2_14 a3_14

## Prédiction des axes

predict a1 a2 a3

## Syntaxe générale de clustering

cluster wardslinkage a1 a2 a3, measure(L2)
cluster generate o = groups(12), name(_clus_1) ties(error)

## Clustering direct sur les données en 9 dimensions


cluster wardslinkage p_cs1 p_cs3 p_cs2 p_cs4 p_cs5 p_cs6 p_cs8 p_cs7 p_cs9 if session==1997, measure(L2)
cluster wardslinkage p_cs1 p_cs3 p_cs2 p_cs4 p_cs5 p_cs6 p_cs8 p_cs7 p_cs9 if session==1998, measure(L2)
cluster wardslinkage p_cs1 p_cs3 p_cs2 p_cs4 p_cs5 p_cs6 p_cs8 p_cs7 p_cs9 if session==1999, measure(L2)
cluster wardslinkage p_cs1 p_cs3 p_cs2 p_cs4 p_cs5 p_cs6 p_cs8 p_cs7 p_cs9 if session==2000, measure(L2)
cluster wardslinkage p_cs1 p_cs3 p_cs2 p_cs4 p_cs5 p_cs6 p_cs8 p_cs7 p_cs9 if session==2001, measure(L2)
cluster wardslinkage p_cs1 p_cs3 p_cs2 p_cs4 p_cs5 p_cs6 p_cs8 p_cs7 p_cs9 if session==2002, measure(L2)
cluster wardslinkage p_cs1 p_cs3 p_cs2 p_cs4 p_cs5 p_cs6 p_cs8 p_cs7 p_cs9 if session==2003, measure(L2)
cluster wardslinkage p_cs1 p_cs3 p_cs2 p_cs4 p_cs5 p_cs6 p_cs8 p_cs7 p_cs9 if session==2004, measure(L2)
cluster wardslinkage p_cs1 p_cs3 p_cs2 p_cs4 p_cs5 p_cs6 p_cs8 p_cs7 p_cs9 if session==2005, measure(L2)
cluster wardslinkage p_cs1 p_cs3 p_cs2 p_cs4 p_cs5 p_cs6 p_cs8 p_cs7 p_cs9 if session==2006, measure(L2)
cluster wardslinkage p_cs1 p_cs3 p_cs2 p_cs4 p_cs5 p_cs6 p_cs8 p_cs7 p_cs9 if session==2007, measure(L2)
cluster wardslinkage p_cs1 p_cs3 p_cs2 p_cs4 p_cs5 p_cs6 p_cs8 p_cs7 p_cs9 if session==2008, measure(L2)
cluster wardslinkage p_cs1 p_cs3 p_cs2 p_cs4 p_cs5 p_cs6 p_cs8 p_cs7 p_cs9 if session==2009, measure(L2)
cluster wardslinkage p_cs1 p_cs3 p_cs2 p_cs4 p_cs5 p_cs6 p_cs8 p_cs7 p_cs9 if session==2010, measure(L2)
cluster wardslinkage p_cs1 p_cs3 p_cs2 p_cs4 p_cs5 p_cs6 p_cs8 p_cs7 p_cs9 if session==2011, measure(L2)
cluster wardslinkage p_cs1 p_cs3 p_cs2 p_cs4 p_cs5 p_cs6 p_cs8 p_cs7 p_cs9 if session==2012, measure(L2)
cluster wardslinkage p_cs1 p_cs3 p_cs2 p_cs4 p_cs5 p_cs6 p_cs8 p_cs7 p_cs9 if session==2013, measure(L2)
cluster wardslinkage p_cs1 p_cs3 p_cs2 p_cs4 p_cs5 p_cs6 p_cs8 p_cs7 p_cs9 if session==2014, measure(L2)

cluster generate o97 = groups(12), name(_clus_1) ties(error)
cluster generate o98 = groups(12), name(_clus_2) ties(error)
cluster generate o99 = groups(12), name(_clus_3) ties(error)
cluster generate o00 = groups(12), name(_clus_4) ties(error)
cluster generate o01 = groups(12), name(_clus_5) ties(error)
cluster generate o02 = groups(12), name(_clus_6) ties(error)
cluster generate o03 = groups(12), name(_clus_7) ties(error)
cluster generate o04 = groups(12), name(_clus_8) ties(error)
cluster generate o05 = groups(12), name(_clus_9) ties(error)
cluster generate o06 = groups(12), name(_clus_10) ties(error)
cluster generate o07 = groups(12), name(_clus_11) ties(error)
cluster generate o08 = groups(12), name(_clus_12) ties(error)
cluster generate o09 = groups(12), name(_clus_13) ties(error)
cluster generate o10 = groups(12), name(_clus_14) ties(error)
cluster generate o11 = groups(12), name(_clus_15) ties(error)
cluster generate o12 = groups(12), name(_clus_16) ties(error)
cluster generate o13 = groups(12), name(_clus_17) ties(error)
cluster generate o14 = groups(12), name(_clus_18) ties(error)


mds p_cs1 p_cs2 p_cs3 p_cs4 p_cs5 p_cs6 p_cs7 p_cs8 p_cs9 if session==1997, id(numetab) method(classical) measure(L2) dimension(2)
predict x97 y97
mds p_cs1 p_cs2 p_cs3 p_cs4 p_cs5 p_cs6 p_cs7 p_cs8 p_cs9 if session==1998, id(numetab) method(classical) measure(L2) dimension(2)
predict x98 y98
mds p_cs1 p_cs2 p_cs3 p_cs4 p_cs5 p_cs6 p_cs7 p_cs8 p_cs9 if session==1999, id(numetab) method(classical) measure(L2) dimension(2)
predict x99 y99
mds p_cs1 p_cs2 p_cs3 p_cs4 p_cs5 p_cs6 p_cs7 p_cs8 p_cs9 if session==2000, id(numetab) method(classical) measure(L2) dimension(2)
predict x00 y00
mds p_cs1 p_cs2 p_cs3 p_cs4 p_cs5 p_cs6 p_cs7 p_cs8 p_cs9 if session==2001, id(numetab) method(classical) measure(L2) dimension(2)
predict x01 y01
mds p_cs1 p_cs2 p_cs3 p_cs4 p_cs5 p_cs6 p_cs7 p_cs8 p_cs9 if session==2002, id(numetab) method(classical) measure(L2) dimension(2)
predict x02 y02
mds p_cs1 p_cs2 p_cs3 p_cs4 p_cs5 p_cs6 p_cs7 p_cs8 p_cs9 if session==2003, id(numetab) method(classical) measure(L2) dimension(2)
predict x03 y03
mds p_cs1 p_cs2 p_cs3 p_cs4 p_cs5 p_cs6 p_cs7 p_cs8 p_cs9 if session==2004, id(numetab) method(classical) measure(L2) dimension(2)
predict x04 y04
mds p_cs1 p_cs2 p_cs3 p_cs4 p_cs5 p_cs6 p_cs7 p_cs8 p_cs9 if session==2005, id(numetab) method(classical) measure(L2) dimension(2)
predict x05 y05
mds p_cs1 p_cs2 p_cs3 p_cs4 p_cs5 p_cs6 p_cs7 p_cs8 p_cs9 if session==2006, id(numetab) method(classical) measure(L2) dimension(2)
predict x06 y06
mds p_cs1 p_cs2 p_cs3 p_cs4 p_cs5 p_cs6 p_cs7 p_cs8 p_cs9 if session==2007, id(numetab) method(classical) measure(L2) dimension(2)
predict x07 y07
mds p_cs1 p_cs2 p_cs3 p_cs4 p_cs5 p_cs6 p_cs7 p_cs8 p_cs9 if session==2008, id(numetab) method(classical) measure(L2) dimension(2)
predict x08 y08
mds p_cs1 p_cs2 p_cs3 p_cs4 p_cs5 p_cs6 p_cs7 p_cs8 p_cs9 if session==2009, id(numetab) method(classical) measure(L2) dimension(2)
predict x09 y09
mds p_cs1 p_cs2 p_cs3 p_cs4 p_cs5 p_cs6 p_cs7 p_cs8 p_cs9 if session==2010, id(numetab) method(classical) measure(L2) dimension(2)
predict x10 y10
mds p_cs1 p_cs2 p_cs3 p_cs4 p_cs5 p_cs6 p_cs7 p_cs8 p_cs9 if session==2011, id(numetab) method(classical) measure(L2) dimension(2)
predict x11 y11
mds p_cs1 p_cs2 p_cs3 p_cs4 p_cs5 p_cs6 p_cs7 p_cs8 p_cs9 if session==2012, id(numetab) method(classical) measure(L2) dimension(2)
predict x12 y12
mds p_cs1 p_cs2 p_cs3 p_cs4 p_cs5 p_cs6 p_cs7 p_cs8 p_cs9 if session==2013, id(numetab) method(classical) measure(L2) dimension(2)
predict x13 y13
mds p_cs1 p_cs2 p_cs3 p_cs4 p_cs5 p_cs6 p_cs7 p_cs8 p_cs9 if session==2014, id(numetab) method(classical) measure(L2) dimension(2)
predict x14 y14

### Clustering itératif ###



## Axes

pca p_cs2 p_cs3 p_cs4 p_cs5 p_cs6 p_cs7 p_cs8 [w=tot_inscrits] if session==1997
predict zz1 zz2
factor p_cs2 p_cs3 p_cs4 p_cs5 p_cs6 p_cs7 p_cs8 [w=tot_inscrits] if session==1997
predict yy1 yy2

# cluster sur les axes (préférable d'en retenir 3)

cluster wardslinkage yy1 yy2 if session==1997, measure(L2)

# Construction des groupes selon le dendrogramme (2/3)

cluster dendrogram _clus_19, cutnumber(20)

cluster generate g2 = groups(2), name(_clus_19) 
cluster generate g3 = groups(3) , name(_clus_19)

# Graphique

sc yy2 yy1 if g3 == 1, mc(blue) || sc yy2 yy1 if g3 == 2, mc(red) || sc yy2 yy1 if g3 == 3 , mc(black)

## Itération

cluster wardslinkage yy1 yy2 if g3==1 & session==1997, measure(L2)

cluster dendrogram _clus_20, cutnumber(20)

cluster generate gg3 = groups(3) , name(_clus_20)

tab gg3

sc yy2 yy1 if gg3 == 1, mc(blue) || sc yy2 yy1 if gg3==2, mc(pink) || sc yy2 yy1 if gg3==3, mc(orange) || sc yy2 yy1 if g3 == 2, mc(red) || sc yy2 yy1 if g3 == 3 , mc(black)

## Systématisation

factor p_cs2 p_cs3 p_cs4 p_cs5 p_cs6 p_cs7 p_cs8 [w=tot_inscrits] if session==2000
predict ax1_00 ax2_00 ax3_00
factor p_cs2 p_cs3 p_cs4 p_cs5 p_cs6 p_cs7 p_cs8 [w=tot_inscrits] if session==2007
predict ax1_07 ax2_07 ax3_07
factor p_cs2 p_cs3 p_cs4 p_cs5 p_cs6 p_cs7 p_cs8 [w=tot_inscrits] if session==2014
predict ax1_14 ax2_14 ax3_14
sc ax1_00 ax1_07 ax1_14

## Typo 2000 

cluster wardslinkage ax1_00 ax2_00 ax3_00 if  session==2000, measure(L2) name(c1_00) 
cluster dendrogram c1_00, cutnumber(20)
cluster generate g1_3_00 = groups(3)

tab g1_3_00

cluster wardslinkage ax1_00 ax2_00 ax3_00 if  session==2000 &  g1_3_00 == 1 ,  measure(L2) name(c2a_00) 
cluster dendrogram c2a_00, cutnumber(20)
cluster generate g2a_3_00 = groups(2)

cluster wardslinkage ax1_00 ax2_00 ax3_00 if  session==2000 &  g1_3_00 == 2 ,  measure(L2) name(c2b_00)
cluster dendrogram c2b_00, cutnumber(20)
cluster generate g2b_3_00 = groups(2)

cluster wardslinkage ax1_00 ax2_00 ax3_00 if  session==2000 &  g1_3_00 == 3 ,  measure(L2) name(c2c_00)
cluster dendrogram c2c_00, cutnumber(20)
cluster generate g2c_3_00 = groups(3) 


factor p_cs2 p_cs3 p_cs4 p_cs5 p_cs6 p_cs7 p_cs8 [w=tot_inscrits] if session==2000
loadingplot

gen typo_00 = .

replace typo_00 = 1 if g2a_3_00 == 1
replace typo_00 = 2 if g2a_3_00 == 2

replace typo_00 = 3 if g2b_3_00 == 1
replace typo_00 = 4 if g2b_3_00 == 2

replace typo_00 = 5 if g2c_3_00 == 1
replace typo_00 = 6 if g2c_3_00 == 2
replace typo_00 = 7 if g2c_3_00 == 3






