

## Import

import delimited C:\Users\Antoine\Desktop\DEPP\s97.csv
save "C:\Users\Antoine\Desktop\DEPP\s97.dta"
clear
import delimited C:\Users\Antoine\Desktop\DEPP\s98.csv
save "C:\Users\Antoine\Desktop\DEPP\s98.dta"
clear
import delimited C:\Users\Antoine\Desktop\DEPP\s99.csv
save "C:\Users\Antoine\Desktop\DEPP\s99.dta"
clear
import delimited C:\Users\Antoine\Desktop\DEPP\s00.csv
save "C:\Users\Antoine\Desktop\DEPP\s00.dta"
clear
import delimited C:\Users\Antoine\Desktop\DEPP\s01.csv
save "C:\Users\Antoine\Desktop\DEPP\s01.dta"
clear
import delimited C:\Users\Antoine\Desktop\DEPP\s02.csv
save "C:\Users\Antoine\Desktop\DEPP\s02.dta"
clear
import delimited C:\Users\Antoine\Desktop\DEPP\s03.csv
save "C:\Users\Antoine\Desktop\DEPP\s03.dta"
clear
import delimited C:\Users\Antoine\Desktop\DEPP\s04.csv
save "C:\Users\Antoine\Desktop\DEPP\s04.dta"
clear
import delimited C:\Users\Antoine\Desktop\DEPP\s05.csv
save "C:\Users\Antoine\Desktop\DEPP\s05.dta"
clear
import delimited C:\Users\Antoine\Desktop\DEPP\s06.csv
save "C:\Users\Antoine\Desktop\DEPP\s06.dta"
clear
import delimited C:\Users\Antoine\Desktop\DEPP\s07.csv
save "C:\Users\Antoine\Desktop\DEPP\s07.dta"
clear
import delimited C:\Users\Antoine\Desktop\DEPP\s08.csv
save "C:\Users\Antoine\Desktop\DEPP\s08.dta"
clear
import delimited C:\Users\Antoine\Desktop\DEPP\s09.csv
save "C:\Users\Antoine\Desktop\DEPP\s09.dta"
clear
import delimited C:\Users\Antoine\Desktop\DEPP\s10.csv
save "C:\Users\Antoine\Desktop\DEPP\s10.dta"
clear
import delimited C:\Users\Antoine\Desktop\DEPP\s11.csv
save "C:\Users\Antoine\Desktop\DEPP\s11.dta"
clear
import delimited C:\Users\Antoine\Desktop\DEPP\s12.csv
save "C:\Users\Antoine\Desktop\DEPP\s12.dta"
clear
import delimited C:\Users\Antoine\Desktop\DEPP\s13.csv
save "C:\Users\Antoine\Desktop\DEPP\s13.dta"
clear
import delimited C:\Users\Antoine\Desktop\DEPP\s14.csv
save "C:\Users\Antoine\Desktop\DEPP\s14.dta"

## Gestion des incohérences de format 

use "C:\Users\Antoine\Desktop\DEPP\s07.dta"

tab franaistranger

destring franaistranger, replace force
save "C:\Users\Antoine\Desktop\DEPP\s07.dta", replace
use "C:\Users\Antoine\Desktop\DEPP\s08.dta"
destring franaistranger, replace force
save "C:\Users\Antoine\Desktop\DEPP\s08.dta", replace
use "C:\Users\Antoine\Desktop\DEPP\s09.dta"
destring franaistranger, replace force
save "C:\Users\Antoine\Desktop\DEPP\s09.dta", replace
use "C:\Users\Antoine\Desktop\DEPP\s10.dta"
destring franaistranger, replace force
save "C:\Users\Antoine\Desktop\DEPP\s10.dta", replace
use "C:\Users\Antoine\Desktop\DEPP\s11.dta"
destring franaistranger, replace force
save "C:\Users\Antoine\Desktop\DEPP\s11.dta", replace
use "C:\Users\Antoine\Desktop\DEPP\s12.dta"
destring franaistranger, replace force
save "C:\Users\Antoine\Desktop\DEPP\s12.dta", replace
use "C:\Users\Antoine\Desktop\DEPP\s13.dta"
destring franaistranger, replace force
save "C:\Users\Antoine\Desktop\DEPP\s13.dta", replace
use "C:\Users\Antoine\Desktop\DEPP\s14.dta"
destring franaistranger, replace force
save "C:\Users\Antoine\Desktop\DEPP\s14.dta", replace
clear

## Fusion des fichiers par année

use "C:\Users\Antoine\Desktop\DEPP\s97.dta", clear

append using "C:\Users\Antoine\Desktop\DEPP\s98.dta"
append using "C:\Users\Antoine\Desktop\DEPP\s99.dta"
append using "C:\Users\Antoine\Desktop\DEPP\s00.dta"
append using "C:\Users\Antoine\Desktop\DEPP\s01.dta"
append using "C:\Users\Antoine\Desktop\DEPP\s02.dta"
append using "C:\Users\Antoine\Desktop\DEPP\s03.dta"
append using "C:\Users\Antoine\Desktop\DEPP\s04.dta"
append using "C:\Users\Antoine\Desktop\DEPP\s05.dta"
append using "C:\Users\Antoine\Desktop\DEPP\s06.dta"
append using "C:\Users\Antoine\Desktop\DEPP\s07.dta"
append using "C:\Users\Antoine\Desktop\DEPP\s08.dta"
append using "C:\Users\Antoine\Desktop\DEPP\s09.dta"
append using "C:\Users\Antoine\Desktop\DEPP\s10.dta"
append using "C:\Users\Antoine\Desktop\DEPP\s11.dta"
append using "C:\Users\Antoine\Desktop\DEPP\s12.dta"
append using "C:\Users\Antoine\Desktop\DEPP\s13.dta"
append using "C:\Users\Antoine\Desktop\DEPP\s14.dta"

## Sauvegarde

save "C:\Users\Antoine\Desktop\DEPP\depp.dta"

## Renommage des variables

ren originesocialedtaille pcs8
ren pcs8 pcs24
ren originesociale8groupes pcs8
ren franaistranger natio
ren sriedubaccalauratlibc serie
ren numrodtablissement numetan
ren numetan numetab
ren communeetarrondissement com
ren secteurdenseignement secteur
ren etablissementsensible sensible
ren nombredinscrits inscrits
ren nombredeprsents presents
ren nombretotaldadmis admis
ren nombredadmissansmention nomention
ren nombredadmismentionab ab
ren nombredadmismentionb b
ren nombredadmismentiontb tb
ren nombredtablissements nbetab

## Id Unique Lycée x Session 

egen id_etab = concat(numetab session), punct(_)


## Compteur des résultats

gen num = 1

bysort id_etab : egen  pond_admis = total(admis)
bysort id_etab : egen  pond_inscrits = total(inscrits)
bysort id_etab : egen  pond_presents = total(presents)
bysort id_etab : egen  pond_nomention = total(nomention)
bysort id_etab : egen  pond_ab = total(ab)
bysort id_etab : egen  pond_b = total(b)
bysort id_etab : egen  pond_tb = total(tb)

order pond_inscrits pond_presents, after( num )

## Taux de réussite et mention

gen psucc = ( pond_admis / pond_inscrits ) * 100
gen nm_adm = ( pond_nomention / pond_admis ) * 100
gen ab_adm = ( pond_ab / pond_admis ) * 100
gen b_adm = ( pond_b / pond_admis ) * 100
gen tb_adm = ( pond_tb / pond_admis ) * 100

## Gestion des valeurs manquantes

replace nm_adm = 0 if nm_adm == .
replace ab_adm = 0 if ab_adm == .
replace b_adm = 0 if b_adm == .
replace tb_adm = 0 if tb_adm == .

## Identifiant par mention, par lycée et par session 

egen id_etab2 = concat(numetab session serie ), punct(_)

bysort id_etab2 : egen  ser_admis = total(admis)
bysort id_etab2 : egen  ser_inscrits = total(inscrits)
bysort id_etab2 : egen  ser_presents = total(presents)
bysort id_etab2 : egen  ser_nomention = total(nomention)
bysort id_etab2 : egen  ser_ab = total(ab)
bysort id_etab2 : egen  ser_b = total(b)
bysort id_etab2 : egen  ser_tb = total(tb)

gen ser_succ = ( ser_admis / ser_inscrits ) * 100
gen ser_nm_adm = ( ser_nomention / ser_admis ) * 100
gen ser_ab_adm = ( ser_ab / ser_admis ) * 100
gen ser_b_adm = ( ser_b / ser_admis ) * 100
gen ser_tb_adm = ( ser_tb / ser_admis ) * 100

replace ser_nm_adm = 0 if ser_nm_adm == .
replace ser_ab_adm = 0 if ser_ab_adm == .
replace ser_b_adm = 0 if ser_b_adm == .
replace ser_tb_adm = 0 if ser_tb_adm == .

## TODO : PCS

use "C:\Users\Antoine\Desktop\DEPP\depp.dta", clear

bysort id_etab : egen cs1 = total(inscrits) if pcs8 == 1
bysort id_etab : egen cs2 = total(inscrits) if pcs8 == 2
bysort id_etab : egen cs3 = total(inscrits) if pcs8 == 3
bysort id_etab : egen cs4 = total(inscrits) if pcs8 == 4
bysort id_etab : egen cs5 = total(inscrits) if pcs8 == 5
bysort id_etab : egen cs6 = total(inscrits) if pcs8 == 6
bysort id_etab : egen cs7 = total(inscrits) if pcs8 == 7
bysort id_etab : egen cs8 = total(inscrits) if pcs8 == 8
bysort id_etab : egen cs9 = total(inscrits) if pcs8 == 9

## Cylindrage des données 

egen test = group ( id_etab )

xfill cs1, i(test)
xfill cs2, i(test)
xfill cs3, i(test)
xfill cs4, i(test)
xfill cs5, i(test)
xfill cs6, i(test)
xfill cs7, i(test)
xfill cs8, i(test)
xfill cs9, i(test)

replace cs1 = 0 if cs1 == .
replace cs2 = 0 if cs2 == .
replace cs3 = 0 if cs3 == .
replace cs4 = 0 if cs4 == .
replace cs5 = 0 if cs5 == .
replace cs6 = 0 if cs6 == .
replace cs7 = 0 if cs7 == .
replace cs8 = 0 if cs8 == .
replace cs9 = 0 if cs9 == .

## Boucle pourcentages (CS8)

foreach x of varlist (cs1-cs9) {
gen p_`x' = (`x' / pond_inscrits) * 100
}

## Controle

egen control_1 = rowtotal (p_cs1-p_cs9)

drop control_1


### A partir de cette étape, on peut réaliser un export ###
### On peut aussi reprendre la procédure avec la pcs24  ###

### Demo Export ###

save "C:\Users\Antoine\Desktop\DEPP\depp.dta", replace

duplicates drop test, force
 
## On passe ici d'un dataset à 5 millions de lignes à un dataset de 100 000 lignes.
## Une par an, par lycée, par série, par cs à une par an et par lycée.

### PCS 24 postes 
 
bysort id_etab : egen cs10 = total(inscrits) if pcs24 == 10
bysort id_etab : egen cs20 = total(inscrits) if pcs24 == 20
bysort id_etab : egen cs21 = total(inscrits) if pcs24 == 21
bysort id_etab : egen cs22 = total(inscrits) if pcs24 == 22
bysort id_etab : egen cs23 = total(inscrits) if pcs24 == 23
bysort id_etab : egen cs30 = total(inscrits) if pcs24 == 30
bysort id_etab : egen cs31 = total(inscrits) if pcs24 == 31
bysort id_etab : egen cs33 = total(inscrits) if pcs24 == 33
bysort id_etab : egen cs34 = total(inscrits) if pcs24 == 34
bysort id_etab : egen cs35 = total(inscrits) if pcs24 == 35
bysort id_etab : egen cs37 = total(inscrits) if pcs24 == 37
bysort id_etab : egen cs38 = total(inscrits) if pcs24 == 38
bysort id_etab : egen cs40 = total(inscrits) if pcs24 == 40
bysort id_etab : egen cs42 = total(inscrits) if pcs24 == 42
bysort id_etab : egen cs43 = total(inscrits) if pcs24 == 43
bysort id_etab : egen cs44 = total(inscrits) if pcs24 == 44
bysort id_etab : egen cs45 = total(inscrits) if pcs24 == 45
bysort id_etab : egen cs46 = total(inscrits) if pcs24 == 46
bysort id_etab : egen cs47 = total(inscrits) if pcs24 == 47
bysort id_etab : egen cs48 = total(inscrits) if pcs24 == 48
bysort id_etab : egen cs50 = total(inscrits) if pcs24 == 50
bysort id_etab : egen cs52 = total(inscrits) if pcs24 == 52
bysort id_etab : egen cs53 = total(inscrits) if pcs24 == 53
bysort id_etab : egen cs54 = total(inscrits) if pcs24 == 54
bysort id_etab : egen cs55 = total(inscrits) if pcs24 == 55
bysort id_etab : egen cs56 = total(inscrits) if pcs24 == 56
bysort id_etab : egen cs60 = total(inscrits) if pcs24 == 60
bysort id_etab : egen cs61 = total(inscrits) if pcs24 == 61
bysort id_etab : egen cs66 = total(inscrits) if pcs24 == 66
bysort id_etab : egen cs69 = total(inscrits) if pcs24 == 69
bysort id_etab : egen cs70 = total(inscrits) if pcs24 == 70
bysort id_etab : egen cs71 = total(inscrits) if pcs24 == 71
bysort id_etab : egen cs72 = total(inscrits) if pcs24 == 72
bysort id_etab : egen cs73 = total(inscrits) if pcs24 == 73
bysort id_etab : egen cs76 = total(inscrits) if pcs24 == 76
bysort id_etab : egen cs80 = total(inscrits) if pcs24 == 80
bysort id_etab : egen cs81 = total(inscrits) if pcs24 == 81
bysort id_etab : egen cs82 = total(inscrits) if pcs24 == 82
bysort id_etab : egen cs99 = total(inscrits) if pcs24 == 99


xfill cs10 , i(test)
xfill cs20 , i(test)
xfill cs21 , i(test)
xfill cs22 , i(test)
xfill cs23 , i(test)
xfill cs30 , i(test)
xfill cs31 , i(test)
xfill cs33 , i(test)
xfill cs34 , i(test)
xfill cs35 , i(test)
xfill cs37 , i(test)
xfill cs38 , i(test)
xfill cs40 , i(test)
xfill cs42 , i(test)
xfill cs43 , i(test)
xfill cs44 , i(test)
xfill cs45 , i(test)
xfill cs46 , i(test)
xfill cs47 , i(test)
xfill cs48 , i(test)
xfill cs50 , i(test)
xfill cs52 , i(test)
xfill cs53 , i(test)
xfill cs54 , i(test)
xfill cs55 , i(test)
xfill cs56 , i(test)
xfill cs60 , i(test)
xfill cs61 , i(test)
xfill cs66 , i(test)
xfill cs69 , i(test)
xfill cs70 , i(test)
xfill cs71 , i(test)
xfill cs72 , i(test)
xfill cs73 , i(test)
xfill cs76 , i(test)
xfill cs80 , i(test)
xfill cs81 , i(test)
xfill cs82 , i(test)
xfill cs99 , i(test)


replace cs10=0 if cs10==.
replace cs20=0 if cs20==.
replace cs21=0 if cs21==.
replace cs22=0 if cs22==.
replace cs23=0 if cs23==.
replace cs30=0 if cs30==.
replace cs31=0 if cs31==.
replace cs33=0 if cs33==.
replace cs34=0 if cs34==.
replace cs35=0 if cs35==.
replace cs37=0 if cs37==.
replace cs38=0 if cs38==.
replace cs40=0 if cs40==.
replace cs42=0 if cs42==.
replace cs43=0 if cs43==.
replace cs44=0 if cs44==.
replace cs45=0 if cs45==.
replace cs46=0 if cs46==.
replace cs47=0 if cs47==.
replace cs48=0 if cs48==.
replace cs50=0 if cs50==.
replace cs52=0 if cs52==.
replace cs53=0 if cs53==.
replace cs54=0 if cs54==.
replace cs55=0 if cs55==.
replace cs56=0 if cs56==.
replace cs60=0 if cs60==.
replace cs61=0 if cs61==.
replace cs66=0 if cs66==.
replace cs69=0 if cs69==.
replace cs70=0 if cs70==.
replace cs71=0 if cs71==.
replace cs72=0 if cs72==.
replace cs73=0 if cs73==.
replace cs76=0 if cs76==.
replace cs80=0 if cs80==.
replace cs81=0 if cs81==.
replace cs82=0 if cs82==.
replace cs99=0 if cs99==.


foreach x of varlist (cs10-cs99) {
gen p_`x' = (`x' / pond_inscrits) * 100
}

## Identification des effectifs par par type de bac

bysort id_etab : egen bac_es = total(inscrits) if type == 1
bysort id_etab : egen bac_l = total(inscrits) if type == 6
bysort id_etab : egen bac_s = total(inscrits) if type == 9

xfill bac_es, i(test)
xfill bac_l, i(test)
xfill bac_s, i(test)

replace bac_es = 0 if bac_es == .
replace bac_l = 0 if bac_l == .
replace bac_s = 0 if bac_s == .

foreach x of varlist (bac_es-bac_s) {
gen p_`x' = (`x' / tot_inscrits) * 100
}

## Taux de réussite par type de bac

bysort id_etab : egen adm_bac_es = total(admis) if type == 1
bysort id_etab : egen adm_bac_l = total(admis) if type == 6
bysort id_etab : egen adm_bac_s = total(admis) if type == 9

xfill adm_bac_es, i(test)
xfill adm_bac_l, i(test)
xfill adm_bac_s, i(test)

replace adm_bac_es = 0 if adm_bac_es == .
replace adm_bac_l = 0 if adm_bac_l == .
replace adm_bac_s = 0 if adm_bac_s == .

gen tx_adm_es = (adm_bac_es / bac_es) * 100
gen tx_adm_l  = (adm_bac_l  / bac_l) * 100
gen tx_adm_s  = (adm_bac_s  / bac_s) * 100


## Taux de mention par type de bac 

bysort id_etab : egen nm_bac_es = total(nm_adm) if type == 1
bysort id_etab : egen ab_bac_es = total(ab_adm) if type == 1
bysort id_etab : egen b_bac_es = total(b_adm)  if type == 1
bysort id_etab : egen tb_bac_es = total(tb_adm) if type == 1

bysort id_etab : egen nm_bac_l = total(nm_adm) if type == 6
bysort id_etab : egen ab_bac_l = total(ab_adm) if type == 6
bysort id_etab : egen b_bac_l = total(b_adm)  if type == 6
bysort id_etab : egen tb_bac_l = total(tb_adm) if type == 6

bysort id_etab : egen nm_bac_s = total(nm_adm) if type == 9
bysort id_etab : egen ab_bac_s = total(ab_adm) if type == 9
bysort id_etab : egen b_bac_s = total(b_adm)  if type == 9
bysort id_etab : egen tb_bac_s = total(tb_adm) if type == 9

xfill nm_bac_es, i(test)
xfill ab_bac_es, i(test)
xfill b_bac_es, i(test)
xfill tb_bac_es , i(test)

xfill nm_bac_l, i(test)
xfill ab_bac_l, i(test)
xfill b_bac_l, i(test)
xfill tb_bac_l , i(test)

xfill nm_bac_s , i(test)
xfill ab_bac_s , i(test)
xfill b_bac_s , i(test)
xfill tb_bac_s , i(test)

replace nm_bac_es = 0 if nm_bac_es ==.
replace ab_bac_es = 0 if ab_bac_es ==.
replace b_bac_es = 0 if b_bac_es ==.
replace tb_bac_es  = 0 if tb_bac_es ==.

replace nm_bac_l = 0 if nm_bac_l ==.
replace ab_bac_l = 0 if ab_bac_l==.
replace b_bac_l = 0 if b_bac_l ==.
replace tb_bac_l  = 0 if tb_bac_l==.

replace nm_bac_s  = 0 if nm_bac_s==.
replace ab_bac_s  = 0 if ab_bac_s ==.
replace b_bac_s  = 0 if b_bac_s==.
replace tb_bac_s = 0 if tb_bac_s==.

## Analyse factorielle par pcs

factor p_cs1 p_cs2 p_cs3 p_cs4 p_cs5 p_cs6 p_cs7 p_cs8 p_cs9 [w= pond_admis]

## Prédiction des axes

predict a1 a2 a3

## Syntaxe générale de clustering

cluster wardslinkage a1 a2 a3, measure(L2)
cluster generate o = groups(12), name(_clus_1) ties(error)

